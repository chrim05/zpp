{
	"information_for_contributors": [
		"This file has been converted from https://github.com/dustypomerleau/rust-syntax/blob/master/syntaxes/rust.tmLanguage.json",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/dustypomerleau/rust-syntax/commit/20462d50ff97338f42c6b64c3f421c634fd60734",
	"name": "zpp",
	"scopeName": "source.zpp",
	"patterns": [
		{
			"comment": "boxed slice literal",
			"begin": "(<)(\\[)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.brackets.angle.zpp"
				},
				"2": {
					"name": "punctuation.brackets.square.zpp"
				}
			},
			"end": ">",
			"endCaptures": {
				"0": {
					"name": "punctuation.brackets.angle.zpp"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#gtypes"
				},
				{
					"include": "#lvariables"
				},
				{
					"include": "#punctuation"
				},
				{
					"include": "#types"
				}
			]
		},
		{
			"comment": "macro type metavariables",
			"name": "meta.macro.metavariable.type.zpp",
			"match": "(\\$)((crate)|([A-Z][A-Za-z0-9_]*))((:)(block|expr|ident|item|lifetime|literal|meta|path?|stmt|tt|ty|vis))?",
			"captures": {
				"1": {
					"name": "keyword.operator.macro.dollar.zpp"
				},
				"3": {
					"name": "keyword.other.crate.zpp"
				},
				"4": {
					"name": "entity.name.type.metavariable.zpp"
				},
				"6": {
					"name": "keyword.operator.key-value.zpp"
				},
				"7": {
					"name": "variable.other.metavariable.specifier.zpp"
				}
			},
			"patterns": [
				{
					"include": "#keywords"
				}
			]
		},
		{
			"comment": "macro metavariables",
			"name": "meta.macro.metavariable.zpp",
			"match": "(\\$)([a-z][A-Za-z0-9_]*)((:)(block|expr|ident|item|lifetime|literal|meta|path?|stmt|tt|ty|vis))?",
			"captures": {
				"1": {
					"name": "keyword.operator.macro.dollar.zpp"
				},
				"2": {
					"name": "variable.other.metavariable.name.zpp"
				},
				"4": {
					"name": "keyword.operator.key-value.zpp"
				},
				"5": {
					"name": "variable.other.metavariable.specifier.zpp"
				}
			},
			"patterns": [
				{
					"include": "#keywords"
				}
			]
		},
		{
			"comment": "macro rules",
			"name": "meta.macro.rules.zpp",
			"match": "\\b(macro_rules!)\\s+(([a-z0-9_]+)|([A-Z][a-z0-9_]*))\\s+(\\{)",
			"captures": {
				"1": {
					"name": "entity.name.function.macro.rules.zpp"
				},
				"3": {
					"name": "entity.name.function.macro.zpp"
				},
				"4": {
					"name": "entity.name.type.macro.zpp"
				},
				"5": {
					"name": "punctuation.brackets.curly.zpp"
				}
			}
		},
		{
			"comment": "attributes",
			"name": "meta.attribute.zpp",
			"begin": "(#)(\\!?)(\\[)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.attribute.zpp"
				},
				"2": {
					"name": "keyword.operator.attribute.inner.zpp"
				},
				"3": {
					"name": "punctuation.brackets.attribute.zpp"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.brackets.attribute.zpp"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#punctuation"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#gtypes"
				},
				{
					"include": "#types"
				}
			]
		},
		{
			"include": "#comments"
		},
		{
			"include": "#lvariables"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#gtypes"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#import"
		},
		{
			"include": "#types"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#namespaces"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#variables"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"comment": "line comments",
					"name": "comment.line.double-slash.zpp",
					"match": "\\s*--.*"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"comment": "ALL CAPS constants",
					"name": "constant.other.caps.zpp",
					"match": "\\b[A-Z]{2}[A-Z0-9_]*\\b"
				},
				{
					"comment": "constant declarations",
					"match": "\\b(const)\\s+([A-Z][A-Za-z0-9_]*)\\b",
					"captures": {
						"1": {
							"name": "storage.type.zpp"
						},
						"2": {
							"name": "constant.other.caps.zpp"
						}
					}
				},
				{
					"comment": "decimal integers and floats",
					"name": "constant.numeric.decimal.zpp",
					"match": "\\b\\d[\\d']*(\\.?)[\\d']*(?:(e)([+-])([\\d']+))?(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
					"captures": {
						"1": {
							"name": "punctuation.separator.dot.decimal.zpp"
						},
						"2": {
							"name": "keyword.operator.exponent.zpp"
						},
						"3": {
							"name": "keyword.operator.exponent.sign.zpp"
						},
						"4": {
							"name": "constant.numeric.decimal.exponent.mantissa.zpp"
						},
						"5": {
							"name": "entity.name.type.numeric.zpp"
						}
					}
				},
				{
					"comment": "hexadecimal integers",
					"name": "constant.numeric.hex.zpp",
					"match": "\\b0x[\\da-fA-F_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
					"captures": {
						"1": {
							"name": "entity.name.type.numeric.zpp"
						}
					}
				},
				{
					"comment": "octal integers",
					"name": "constant.numeric.oct.zpp",
					"match": "\\b0o[0-7_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
					"captures": {
						"1": {
							"name": "entity.name.type.numeric.zpp"
						}
					}
				},
				{
					"comment": "binary integers",
					"name": "constant.numeric.bin.zpp",
					"match": "\\b0b[01_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
					"captures": {
						"1": {
							"name": "entity.name.type.numeric.zpp"
						}
					}
				},
				{
					"comment": "booleans",
					"name": "constant.language.bool.zpp",
					"match": "\\b(true|false)\\b"
				}
			]
		},
		"escapes": {
			"comment": "escapes: ASCII, byte, Unicode, quote, regex",
			"name": "constant.character.escape.zpp",
			"match": "(\\\\)(?:(?:(x[0-7][0-7a-fA-F])|(u(\\{)[\\da-fA-F]{4,6}(\\}))|.))",
			"captures": {
				"1": {
					"name": "constant.character.escape.backslash.zpp"
				},
				"2": {
					"name": "constant.character.escape.bit.zpp"
				},
				"3": {
					"name": "constant.character.escape.unicode.zpp"
				},
				"4": {
					"name": "constant.character.escape.unicode.punctuation.zpp"
				},
				"5": {
					"name": "constant.character.escape.unicode.punctuation.zpp"
				}
			}
		},
		"functions": {
			"patterns": [
				{
					"comment": "pub as a function",
					"match": "\\b(extern|export|magic)(\\()",
					"captures": {
						"1": {
							"name": "keyword.other.zpp"
						},
						"2": {
							"name": "punctuation.brackets.round.zpp"
						}
					}
				},
				{
					"comment": "function definition",
					"name": "meta.function.definition.zpp",
					"begin": "\\b(fn)\\s+((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)((\\()|(<))",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.fn.zpp"
						},
						"2": {
							"name": "entity.name.function.zpp"
						},
						"4": {
							"name": "punctuation.brackets.round.zpp"
						},
						"5": {
							"name": "punctuation.brackets.angle.zpp"
						}
					},
					"end": "\\{|;",
					"endCaptures": {
						"0": {
							"name": "punctuation.brackets.curly.zpp"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#lvariables"
						},
						{
							"include": "#constants"
						},
						{
							"include": "#gtypes"
						},
						{
							"include": "#functions"
						},
						{
							"include": "#import"
						},
						{
							"include": "#namespaces"
						},
						{
							"include": "#punctuation"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#types"
						},
						{
							"include": "#variables"
						}
					]
				},
				{
					"comment": "function/method calls, chaining",
					"name": "meta.function.call.zpp",
					"begin": "((?:r#)?[A-Za-z0-9_]+)(\\!?)(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.zpp"
						},
						"2": {
							"name": "punctuation.brackets.round.zpp"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.brackets.round.zpp"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#lvariables"
						},
						{
							"include": "#constants"
						},
						{
							"include": "#gtypes"
						},
						{
							"include": "#functions"
						},
						{
							"include": "#import"
						},
						{
							"include": "#namespaces"
						},
						{
							"include": "#punctuation"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#types"
						},
						{
							"include": "#variables"
						}
					]
				},
				{
					"comment": "function/method calls with turbofish",
					"name": "meta.function.call.zpp",
					"begin": "((?:r#)?[A-Za-z0-9_]+)(?=\\|.*\\|(\\!?)\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.zpp"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.brackets.round.zpp"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#lvariables"
						},
						{
							"include": "#constants"
						},
						{
							"include": "#gtypes"
						},
						{
							"include": "#functions"
						},
						{
							"include": "#import"
						},
						{
							"include": "#namespaces"
						},
						{
							"include": "#punctuation"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#types"
						},
						{
							"include": "#variables"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"comment": "control flow keywords",
					"name": "keyword.control.zpp",
					"match": "\\b(export|import|let|mut|continue|else|elif|if|match|quit|try|uninitialized|null|while)\\b"
				},
				{
					"comment": "storage keywords",
					"name": "keyword.other.zpp storage.type.zpp",
					"match": "\\b(extern)\\b"
				},
				{
					"comment": "defer keywords",
					"name": "keyword.other.zpp storage.type.zpp",
					"match": "\\b(defer)\\b"
				},
				{
					"comment": "const keyword",
					"name": "storage.modifier.zpp",
					"match": "\\b(const)\\b"
				},
				{
					"comment": "type keyword",
					"name": "keyword.declaration.type.zpp storage.type.zpp",
					"match": "\\b(type)\\b"
				},
				{
					"comment": "include keyword",
					"name": "keyword.declaration.include.zpp storage.type.zpp",
					"match": "\\b(include)\\b"
				},
				{
					"comment": "enum keyword",
					"name": "keyword.declaration.enum.zpp storage.type.zpp",
					"match": "\\b(enum)\\b"
				},
				{
					"comment": "trait keyword",
					"name": "keyword.declaration.trait.zpp storage.type.zpp",
					"match": "\\b(trait)\\b"
				},
				{
					"comment": "class keyword",
					"name": "keyword.declaration.struct.zpp storage.type.zpp",
					"match": "\\b(struct|union)\\b"
				},
				{
					"comment": "storage modifiers",
					"name": "storage.modifier.zpp",
					"match": "\\b(abstract|static)\\b"
				},
				{
					"comment": "other keywords",
					"name": "keyword.other.zpp",
					"match": "\\b(as|module|test|pub|with)\\b"
				},
				{
					"comment": "fn",
					"name": "keyword.other.fn.zpp",
					"match": "\\bfn\\b"
				},
				{
					"comment": "extern",
					"name": "keyword.other.extern.zpp",
					"match": "\\bextern\\b"
				},
				{
					"comment": "export",
					"name": "keyword.other.export.zpp",
					"match": "\\bexport\\b"
				},
				{
					"comment": "mut",
					"name": "storage.modifier.mut.zpp",
					"match": "\\bmut\\b"
				},
				{
					"comment": "logical operators",
					"name": "keyword.operator.logical.zpp",
					"match": "((\\^|\\||<<|>>|!)(?!=)|\\b(or|and)\\b)"
				},
				{
					"comment": "logical AND, borrow references",
					"name": "keyword.operator.borrow.and.zpp",
					"match": "&(?![&=])"
				},
				{
					"comment": "assignment operators",
					"name": "keyword.operator.assignment.zpp",
					"match": "(\\+=|-=|\\*=|/=|%=|\\^=|&=|\\|=|<<=|>>=)"
				},
				{
					"comment": "single equal",
					"name": "keyword.operator.assignment.equal.zpp",
					"match": "(?<![<>])=(?!=|>)"
				},
				{
					"comment": "comparison operators",
					"name": "keyword.operator.comparison.zpp",
					"match": "(=(=)?(?!>)|!=|<=|(?<!=)>=)"
				},
				{
					"comment": "math operators",
					"name": "keyword.operator.math.zpp",
					"match": "(([+%]|(\\*(?!\\w)))(?!=))|(-(?!>))|(/(?!/))"
				},
				{
					"comment": "less than, greater than (special case)",
					"match": "(?:\\b|(?:(\\))|(\\])|(\\})))[ \\t]+([<>])[ \\t]+(?:\\b|(?:(\\()|(\\[)|(\\{)))",
					"captures": {
						"1": {
							"name": "punctuation.brackets.round.zpp"
						},
						"2": {
							"name": "punctuation.brackets.square.zpp"
						},
						"3": {
							"name": "punctuation.brackets.curly.zpp"
						},
						"4": {
							"name": "keyword.operator.comparison.zpp"
						},
						"5": {
							"name": "punctuation.brackets.round.zpp"
						},
						"6": {
							"name": "punctuation.brackets.square.zpp"
						},
						"7": {
							"name": "punctuation.brackets.curly.zpp"
						}
					}
				},
				{
					"comment": "namespace operator",
					"name": "keyword.operator.namespace.zpp",
					"match": "::"
				},
				{
					"comment": "dereference asterisk",
					"match": "(\\*)(?=\\w+)",
					"captures": {
						"1": {
							"name": "keyword.operator.dereference.zpp"
						}
					}
				},
				{
					"comment": "subpattern binding",
					"name": "keyword.operator.subpattern.zpp",
					"match": "@"
				},
				{
					"comment": "dot access",
					"name": "keyword.operator.access.dot.zpp",
					"match": "\\.(?!\\.)"
				},
				{
					"comment": "ranges, range patterns",
					"name": "keyword.operator.range.zpp",
					"match": "\\.{2}(=|\\.)?"
				},
				{
					"comment": "colon",
					"name": "keyword.operator.key-value.zpp",
					"match": ":(?!:)"
				},
				{
					"comment": "dashrocket, skinny arrow",
					"name": "keyword.operator.arrow.skinny.zpp",
					"match": "->"
				},
				{
					"comment": "dashrocket, skinny arrow",
					"name": "keyword.operator.arrow.skinny.zpp",
					"match": "~>"
				},
				{
					"comment": "hashrocket, fat arrow",
					"name": "keyword.operator.arrow.fat.zpp",
					"match": "=>"
				},
				{
					"comment": "dollar macros",
					"name": "keyword.operator.macro.dollar.zpp",
					"match": "\\$"
				},
				{
					"comment": "question mark operator, questionably sized, macro kleene matcher",
					"name": "keyword.operator.question.zpp",
					"match": "\\?"
				}
			]
		},
		"interpolations": {
			"comment": "curly brace interpolations",
			"name": "meta.interpolation.zpp",
			"match": "({)[^\"{}]*(})",
			"captures": {
				"1": {
					"name": "punctuation.definition.interpolation.zpp"
				},
				"2": {
					"name": "punctuation.definition.interpolation.zpp"
				}
			}
		},
		"namespaces": {
			"patterns": [
				{
					"comment": "namespace (non-type, non-function path segment)",
					"match": "(?<![A-Za-z0-9_])([a-z0-9_]+)((?<!super|self)::)",
					"captures": {
						"1": {
							"name": "entity.name.namespace.zpp"
						},
						"2": {
							"name": "keyword.operator.namespace.zpp"
						}
					}
				}
			]
		},
		"types": {
			"patterns": [
				{
					"comment": "numeric types",
					"match": "(?<![A-Za-z])(f32|f64|i128|i16|i32|i64|i8|u128|u16|u32|u64|u8)\\b",
					"captures": {
						"1": {
							"name": "entity.name.type.numeric.zpp"
						}
					}
				},
				{
					"comment": "parameterized types",
					"begin": "\\b([A-Z][A-Za-z0-9]*)(<)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.zpp"
						},
						"2": {
							"name": "punctuation.brackets.angle.zpp"
						}
					},
					"end": ">",
					"endCaptures": {
						"0": {
							"name": "punctuation.brackets.angle.zpp"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#lvariables"
						},
						{
							"include": "#punctuation"
						},
						{
							"include": "#types"
						},
						{
							"include": "#variables"
						}
					]
				},
				{
					"comment": "primitive types",
					"name": "entity.name.type.primitive.zpp",
					"match": "\\b(bool|char|str)\\b"
				},
				{
					"comment": "trait declarations",
					"match": "\\b(trait)\\s+([A-Z][A-Za-z0-9]*)\\b",
					"captures": {
						"1": {
							"name": "keyword.declaration.trait.zpp storage.type.zpp"
						},
						"2": {
							"name": "entity.name.type.trait.zpp"
						}
					}
				},
				{
					"comment": "class declarations",
					"match": "\\b(struct|union)\\s+([A-Z][A-Za-z0-9]*)\\b",
					"captures": {
						"1": {
							"name": "keyword.declaration.struct.zpp storage.type.zpp"
						},
						"2": {
							"name": "entity.name.type.struct.zpp"
						}
					}
				},
				{
					"comment": "enum declarations",
					"match": "\\b(enum)\\s+([A-Z][A-Za-z0-9_]*)\\b",
					"captures": {
						"1": {
							"name": "keyword.declaration.enum.zpp storage.type.zpp"
						},
						"2": {
							"name": "entity.name.type.enum.zpp"
						}
					}
				},
				{
					"comment": "type declarations",
					"match": "\\b(type)\\s+([A-Z][A-Za-z0-9_]*)\\b",
					"captures": {
						"1": {
							"name": "keyword.declaration.type.zpp storage.type.zpp"
						},
						"2": {
							"name": "entity.name.type.declaration.zpp"
						}
					}
				},
				{
					"comment": "types",
					"name": "entity.name.type.zpp",
					"match": "\\b[A-Z][A-Za-z0-9]*\\b"
				}
			]
		},
		"gtypes": {
			"patterns": [
				{
					"comment": "option types",
					"name": "entity.name.type.option.zpp",
					"match": "\\b(Some|None)\\b"
				},
				{
					"comment": "result types",
					"name": "entity.name.type.result.zpp",
					"match": "\\b(Ok|Err)\\b"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"comment": "comma",
					"name": "punctuation.comma.zpp",
					"match": ","
				},
				{
					"comment": "curly braces",
					"name": "punctuation.brackets.curly.zpp",
					"match": "[{}]"
				},
				{
					"comment": "parentheses, round brackets",
					"name": "punctuation.brackets.round.zpp",
					"match": "[()]"
				},
				{
					"comment": "semicolon",
					"name": "punctuation.semi.zpp",
					"match": ";"
				},
				{
					"comment": "square brackets",
					"name": "punctuation.brackets.square.zpp",
					"match": "[\\[\\]]"
				},
				{
					"comment": "angle brackets",
					"name": "punctuation.brackets.angle.zpp",
					"match": "(?<!=)[<>]"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"comment": "double-quoted strings and byte strings",
					"name": "string.quoted.double.zpp",
					"begin": "(b?)(\")",
					"beginCaptures": {
						"1": {
							"name": "string.quoted.byte.raw.zpp"
						},
						"2": {
							"name": "punctuation.definition.string.zpp"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.zpp"
						}
					},
					"patterns": [
						{
							"include": "#escapes"
						},
						{
							"include": "#interpolations"
						}
					]
				},
				{
					"comment": "double-quoted raw strings and raw byte strings",
					"name": "string.quoted.double.zpp",
					"begin": "(b?r)(#*)(\")",
					"beginCaptures": {
						"1": {
							"name": "string.quoted.byte.raw.zpp"
						},
						"2": {
							"name": "punctuation.definition.string.raw.zpp"
						},
						"3": {
							"name": "punctuation.definition.string.zpp"
						}
					},
					"end": "(\")(\\2)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.zpp"
						},
						"2": {
							"name": "punctuation.definition.string.raw.zpp"
						}
					}
				},
				{
					"comment": "characters and bytes",
					"name": "string.quoted.single.char.zpp",
					"begin": "(b)?(')",
					"beginCaptures": {
						"1": {
							"name": "string.quoted.byte.raw.zpp"
						},
						"2": {
							"name": "punctuation.definition.char.zpp"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.char.zpp"
						}
					},
					"patterns": [
						{
							"include": "#escapes"
						}
					]
				}
			]
		},
		"lvariables": {
			"comment": "self",
			"name": "variable.language.self.zpp",
			"match": "\\bself\\b"
		},
		"variables": {
			"patterns": [
				{
					"comment": "variables",
					"name": "variable.other.zpp",
					"match": "\\b(?<!(?<!\\.)\\.)(?:r#(?!(self)))?[a-z0-9_]+\\b"
				}
			]
		}
	}
}