from '../modules/mem.zpp' import [
  Allocator,
  create_seq,
  create_allocator, drop_allocator
]

from '../modules/seq.zpp' import [
  String,
  string_eq,
  create_string
]

from '../modules/libc.zpp' import [ puts ]
from '../modules/sys.zpp' import [ Result, Err, Ok ]

-- returns whether 'c' is `a`..`z`
fn is_lower(c: u8) -> u8:
  return c >= `a` and c <= `z`

-- returns whether 'c' is `A`..`Z`
fn is_upper(c: u8) -> u8:
  return c >= `A` and c <= `Z`

-- returns whether 'c' is `a`..`z` or `A`..`Z`
fn is_alpha(c: u8) -> u8:
  return is_lower(c) or is_upper(c)

-- the function encrypts or decrypts 'source' into a new buffer.
-- 'allocator' is used to allocate the output buffer.
-- the function allocates 'source->len + 1' bytes using 'allocator' (
-- ..the last more byte is due to backward compatibility with cstr,
-- ..you can use process().ptr as cstr)
--
-- [NOTE: the function uses 'create' instead of 'dyncreate'
-- ..so please use 'dynallocator_ensure_has_enough_space_for' before calling
-- ..otherwise you will get a panic (UB with '--release')]
--
-- the used algorithm is generally O(n)
fn process(allocator: *mut Allocator, source: String) -> String:
  -- allocating the output buffer
  ptr: *mut u8 = create_seq(|u8| allocator, source.len + 1)

  -- for each char in the source buffer
  for i: u64 = 0, i < source.len, i += 1:
    c: u8 = source.ptr[i]

    -- skipping non alpha chars
    -- we write them in the output buffer as they are
    if not is_alpha(c):
      ptr[i] = c
      continue

    -- calculating and writing the rotated char to the output buffer
    -- we also take care about the letter size
    offset: u8 = `a` if is_lower(c) else `A`
    ptr[i] = (c - offset + 13) % 26 + offset
  
  -- writing the null terminator
  ptr[source.len] = `\0`

  return (ptr: ptr as *u8, len: source.len)

----------------------------------------------------
--                  test area                     --
----------------------------------------------------

fn make_test(processed: String, expected: String) -> Result:
  if not string_eq(processed, expected):
    return Err

  return Ok

test 'encrypting strings and compare them to the correct version (copied from internet)':
  allocator: Allocator = create_allocator(64)
  defer drop_allocator.mut allocator)

  try make_test(process.mut allocator, 'hElLo World!'), 'uRyYb Jbeyq!')
  try make_test(process.mut allocator, '123... hello  WORLD?'), '123... uryyb  JBEYQ?')

test 'encrypting and decrypting strings and compare them to the original version (to test reverse process, aka decryption)':
  allocator: Allocator = create_allocator(128)
  defer drop_allocator.mut allocator)

  original: String = undefined

  original = 'hElLo World!'
  try make_test(process.mut allocator, process.mut allocator, original)), original)

  original = '123... hello  WORLD?'
  try make_test(process.mut allocator, process.mut allocator, original)), original)
