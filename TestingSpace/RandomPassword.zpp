from '../modules/mem.zpp' import [
  Allocator,
  create_allocator, drop_allocator,
  dyncreate_seq
]

from '../modules/seq.zpp' import [ String ]
from '../modules/io.zpp' import [ printf ]
from '../modules/libc.zpp' import [ srand, rand, time ]

-- returns whether `c` is `0`..`9`, `a`..`z` or `A`..`Z`
fn is_alphanum(c: u8) -> u8:
  return \
    (c >= `0` and c <= `9`) or \
    (c >= `a` and c <= `z`) or \
    (c >= `A` and c <= `Z`)

-- return a random number in range `min..=max` (both included)
fn rand_int(|T| min: T, max: T) -> T:
  Assert!(min < max, '`min` is expected to be smaller than `max`')

  return (rand() as T % (max + 1)) + min

-- the function generates an alphanum random password
-- `allocator` is required to allocate the output buffer
-- the function allocates `len` bytes to `allocator`
--
-- the used algorithm is generally O(n)
fn generate_random_pwd(allocator: *mut Allocator, len: u64) -> String:
  -- allocating the output buffer
  ptr: *mut u8 = dyncreate_seq(|u8| allocator, len)
  -- initializing the random generator
  srand(time(null) as u32)

  -- for `len` times
  for i: u64 = 0, i < len, i += 1:
    c: u8 = 0

    -- we keep generating the char
    -- until it`s an alphanum one
    while not is_alphanum(c):
      c = rand_int(|u8| `0`, `z`)

    -- we write it to the output buffer
    ptr[i] = c

  return (ptr: ptr as *u8, len: len)

fn main(argc: u32, argv: **u8) -> i32:
  allocator: Allocator = create_allocator(16)
  defer allocator.mut.drop_allocator()
  
  try printf(fmt!('password: `%`\n', allocator.mut.generate_random_pwd(), 16))) as i32

  return 0
