from '../modules/libc.zpp' import [ OpenModeRead, CFile, fopen, fread, fclose ]
from '../modules/sys.zpp' import [ Error, Ok ]
from '../modules/io.zpp' import [ get_file_stream_size, print, printf ]
from '../modules/seq.zpp' import [ create_string ]

from '../modules/mem.zpp' import [
  Allocator,
  create_allocator, drop_allocator,
  create_seq
]

BadArguments: Error = 1
NoSuchFile: Error = 2
ReadFailed: Error = 3

fn main(argc: u32, argv: **u8) -> Error:
  -- we need a path
  if argc != 2:
    try print('expected `1` argument\n')
    return BadArguments

  -- opening a file using libc
  -- we also close it at the end of the scope
  file_stream: CFile = fopen(argv[1], OpenModeRead)
  defer try fclose(file_stream)

  -- checking that the file is correctly opened
  if file_stream == null:
    try printf(fmt!('no such file: `%`\n', create_string(argv[1])))
    return NoSuchFile

  -- setting up a fixed allocator with, as starting size,
  -- the same one of the opened file (note that calculating
  -- .. the file size could fail, libc says this)
  -- we also deallocate all at the end of the scope
  try get_file_stream_size(file_stream, out file_size: u64)
  allocator: Allocator = create_allocator(file_size)
  defer drop_allocator(&mut allocator)

  -- reading the file content into a buffer of the same size of the file
  buffer: *mut u8 = create_seq(|u8| &mut allocator, file_size)
  -- we use 'len' instead of 'file_size' to construct the string to print
  -- because, for some reason, specific files are correctly printed but
  -- at the same time their 'file_size' and 'len' are different
  -- ('len' represent the real size, until eof)
  len: u64 = fread(buffer, TypeSize!(|u8|), file_size, file_stream)
  try print((ptr: buffer as *u8, len: len))

  return Ok
