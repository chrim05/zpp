from 'seq.zpp' import [ Array, String ]
from 'sys.zpp' import [ Error, Ok ]
from 'mem.zpp' import [
  Allocator,
  dyncreate_seq
]

from 'libc.zpp' import [
  CFile,
  SeekEnd, SeekStart,
  OpenModeRead,
  fwrite, fread,
  get_stdout, puts,
  fopen, fclose,
  fseek, ftell
]


-- this is useful for 'fmt!()'
type FmtString = Array[String]

IoError: Error = 1

-- print the formatted string to stdout
fn printf(msg: FmtString) -> Error:
  for i: u64 = 0, i < msg.len, i += 1:
    try print(msg.ptr[i])
  
  return Ok

-- shortcut for 'fwrite(stdout, ..)'
fn print(msg: String) -> Error:
  count_of_written_elems: u64 = fwrite(
    msg.ptr, type_size!(|u8|), msg.len, get_stdout()
  )

  if count_of_written_elems != msg.len:
    return IoError
  
  return Ok

-- file_stream: wrap of c 'FILE*'
-- return the size in bytes of the opened file stream
fn get_file_stream_size(file_stream: CFile, result_size: *mut u64) -> Error:
  current_position: i64 = ftell(file_stream)
  try fseek(file_stream, 0, SeekEnd)
  *result_size = ftell(file_stream) as u64
  try fseek(file_stream, current_position, SeekStart)

  return Ok

NoSuchFile: Error = 2

fn read_all_file(a: *mut Allocator, filepath: String, output: *mut String) -> Error:
  -- opening the file
  file_stream: CFile = fopen(filepath.ptr, OpenModeRead)
  defer try fclose(file_stream)
  
  -- checking that the file is correctly opened
  try expect_or!(file_stream != null, NoSuchFile)
  -- getting the file size or error
  try get_file_stream_size(file_stream, out file_size: u64)

  -- allocating memory for the file content
  buffer: *mut u8 = dyncreate_seq(|u8| a, file_size)
  len: u64 = fread(buffer, type_size!(|u8|), file_size, file_stream)

  *output = (ptr: buffer as *u8, len: len)

  return Ok