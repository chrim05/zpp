from 'Libc.zpp'   import [ CFile, get_stdout, get_stdin, fwrite, fread ]
from 'Memory.zpp' import [ malloc_collection, realloc_collection ]
from 'String.zpp' import [ String, drop -> drop_string ]
from 'Format.zpp' import [ FormatterArgs, format ]

fn input(prompt: String, buffer: *mut String) -> Result:
  try print(prompt)
  try read_into(buffer)

  return .Ok

-- ? [Remember: drop the result]
fn read_into(buffer: *mut String) -> Result:
  stdin: CFile = get_stdin()
  input_length: u64 = 32
  input_buffer: *mut u8 = malloc_collection(input_length)

  i: u64 = 0
  for .., True, i += 1:
    if i == input_length:
      input_length *= 2
      input_buffer = input_buffer.realloc_collection(input_length / 2, input_length)

    CharactersToRead: u64 = 1
    count_of_read_elems: u64 = fread(
      mut input_buffer[i],
      type_size!(|u8|),
      CharactersToRead,
      stdin
    )

    if count_of_read_elems != CharactersToRead:
      return .Err

    c: u8 = input_buffer[i]

    if c == `\n`:
      input_buffer = input_buffer.realloc_collection(input_length, i)
      break

  *buffer = (ptr: input_buffer, len: i)
  return .Ok

fn printf(fmt: String, args: FormatterArgs) -> Result:
  -- processing format stuff into a fixed buffer
  formatted_buffer: String = fmt.format(args)
  defer formatted_buffer.ref.drop_string()

  return print(formatted_buffer)

fn print(s: String) -> Result:
  -- writing the buffer to the stdout
  -- * the source buffer to print
  -- * the size of each char
  -- * the length of the array
  -- * the file stream
  count_of_written_elems: u64 = fwrite(
    s.ptr,
    type_size!(|u8|),
    s.len,
    get_stdout()
  )

  -- when not all characters are printed we return an error
  return expect_or!(count_of_written_elems == s.len, .IoError)