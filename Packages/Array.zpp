from 'Memory.zpp' import [ malloc_collection, copy_collection_to ]

-- a fat pointer
type Array[T] = (ptr: *T, len: u64)

-- a mutable fat pointer
type MutArray[T] = (ptr: *mut T, len: u64)

-- returns the element at index `i` in collection `self`
fn nth(|T| self: *Array[T], i: u64) -> T:
  assert!(i < self.*.len, 'Index out of bounds')

  return self.*.ptr[i]

-- todo -> write an optimized version of this
fn eq(|T| self: *Array[T], other: *Array[T]) -> u8:
  if self.*.len != other.*.len:
    return False

  for i: u64 = 0, i < self.*.len, i += 1:
    if self.nth(i) != other.nth(i):
      return False
  
  return True

fn clone(|T| self: *Array[T]) -> Array[T]:
  cloned: *mut T = malloc_collection(self.*.len)
  copy_collection_to(self.*.ptr, cloned, self.*.len)

  return (ptr: cloned, len: self.*.len)