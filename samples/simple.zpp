fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Main(argc: u32, argv: **u8) e: u8 {
  quit e = Square(argc - 1, 0);
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}

fn Square(n: i32) sq: i32 {
  quit sq = n * n;
}
