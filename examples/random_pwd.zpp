import 'std:rand.zpp' ( Random, init_random, rand_int )
import 'std:debug.zpp' ( expect )

import 'std:mem.zpp' (
  Chunk, chunk_alloc, drop_chunk,
  init_rchunk = init_resizable_chunk
)

-- returns whether `c` is '0'..'9', 'a'..'z' or 'A'..'Z'
fn is_alphanum(c: u8) -> u8:
  return \
    (c >= '0' and c <= '9') or \
    (c >= 'a' and c <= 'z') or \
    (c >= 'A' and c <= 'Z')

-- the function generates an alphanum random password
-- `chunk` is required to allocate the output buffer
-- the function allocates `len` bytes to `chunk`
-- the used algorithm is generally O(n)
fn generate_random_pwd(chunk: *mut Chunk, len: u8) -> String:
  -- allocating the output buffer
  ptr: *mut u8 = chunk_alloc(chunk, len as u64)
  -- initializing the random generator
  rnd: Random = init_random()

  -- for `len` times
  for .., len > 0, len -= 1:
    i: u8 = 0

    -- we keep generating the char
    -- until it's an alphanum one
    while not is_alphanum(i):
      i = rand_int(|u8| &mut rnd, '0', 'z')

    -- we write it to the output buffer
    ptr[len - 1] = i

  return (len: len as u64, ptr: ptr as *u8)

test 'simple':
  chunk: Chunk = init_rchunk(16)
  defer drop_chunk(&mut chunk)

  output: String = generate_random_pwd(&mut chunk, 16)

  expect!(output.len == 16)

  for i: u64 = 0, i < output.len, i += 1:
    expect!(is_alphanum(output.ptr[i]))